TODO

  start by modifying the grapher

  merge master
  add grapher to page for experimentation

  add selection functionality to grapher

    0. selectionDomain([x1, x2])
      [] is empty set, no selection?
      null is everything
      allow Infinity, -Infinity?

    1. selectionVisible(true)
      presumably the default behavior will be to have user selection enabled

    2. selectionDomain()
      get the selection domain once changed

    3. selectionListener(function)
      get callbacks with selection, or clear the listener if null

    4. selectionListener()
      find out the listener

    5. selectionEnabled(false)
      the key is to figure out how to turn it off while it's still visible

    6. selectionVisible(false)
      remember to also disable user selection

       selectionVisible()
         get value

    7. selectionEnabled(true)
      key here is to turn it back on after it's bbeen disabled

    8. selectionEnabled()
        get value



minimal dataset features we actually need for inquiryspace
--

  chainable, use getter/setter style?

  getter/setters:

    data()
      (of course this should be updated lazily in the case of a selection dataset)

    select() -> Dataset
      args:
        none -> get the selection dataset
        [] -> select all
        [a,b] -> select between x1=a, x2=b
        [a,b], [c, d] -> select rectangle x1, y1 = a, c; x2, y2 = b, d

    xNext()
    xDelta()


  methods:

  add() ->
    d      -> add [xNext(), d] and increment xNext counter by xDelta
    [x, y] -> add [x, y]
    (accepts multiple such elements, each is processed in turn)

  DO NEED minimal EventEmitter functionality so dataset can update graph

  on()
  emit()
  removeListener()


  events:

    data
      single data point added (in a selection, added to backing dataset)

    dataReset
      backing dataset changed, e.g., if this dataset is a selection and the selection criteria changed in the parent dataset. This is for changes that might require a
      redraw.

    dataChange
      union of 'data' and 'dataReset'

    selectionChange
      if the selection criteria changed on this dataset


functionality to graft onto grapher
---

  make minimal change and use the chainable d3-type pattern Stephen has been using, i.e., don't graft on EventEmitter functionality

  getter/setters:

  selectionDomain([x1, x2])
  selectionListener(callback)
    callback signature = function([x1, x2])
  selectionEnabled(boolean)
  selectionVisible(boolean)

  what the graph should do:

    visually indicate selection region and update visual indication when region changes
    allow selection region to be updated by user, or not
    emit selection change events when region is updated by user

    turn off mouse handling when in "selection" mode

  methods for this stuff


graph controller functionality
--

  show(el)

    put default options here, add graph element?

  setDataset()

    given a dataset, hook its selection to the graph selection; hook its data update to the graph's data update; redraw graph on dataReset

    remember to remove listeners if *changing* dataset
    (want to test that all listeners are removed when dataset is added then removed, which means we need to be able to count listeners)

  getDataset()

  showSelection()
  hideSelection()

  enableSelection()
  disableSelection()

  (leave a comment to the effect that you would like to implement notifications of graph zoom/pan events too, at a later time.)


----

earlier notes:

selection region:

see http://bl.ocks.org/1667367


ISImporter.GraphController

  should create, teardown(?) graph and pass it options

  should manage graph (view) instance on behalf of ISImporter app

  => should it "connect" graph and selection rectangle and get out of the way, or should it listen to events on both and proxy them forward?


  stuff requiring new grapher functionality:
  ---

  should be able to instruct graph to send it mouse events, translated to "data coordinates" (easy using d3 ranges)

  should be able to instruct graph to send it selection-rectangle drag events (aka brush events... easy)

  should be able to request a selection rectangle be drawn


ISImporter.Dataset

  accepts data stream via callback

  can be set to automatically

  should probably be similar to d3 ranges?


applet.on('data', function(d) {
  dataset.add(d);   // assume a single data point means use builtin x incrementer
}

dataset.remove()
grapher
we really just care about the d3 'brush' event


brush.on('brushstart' (or 'brush', or 'brushend'))


dataset selection:

 might have multiple selections (eventually)
 want to be able to update or clear extent
 want to get filtered data from it
 probably want a null selection interpreted as "select all data"

 eventually might want inverse range selection (select a region in y, find x within region)

 we're assuming a time series type data here, i guess



dataset = new ISImporter.Dataset()

  data
  add
  remove
  select([...])
  selection() (is a dataset)

  on
  emit
  removeListener

  oh wait it should be possible to mixin these properties


