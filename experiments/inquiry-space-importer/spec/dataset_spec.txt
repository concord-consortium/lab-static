dataset generally
---

  motto: "inner loop friendly"

  requirement: allow backing store to be a typed array (without ruling out heaps, etc)
  requirement: use patterns that avoid GC
  requirement: allow data to be streamed in to dataset
  requirement: optional autoincrement for x values
  requirement: notify listeners when data is updated
  requirement: support the concept of selection on a range of x-values
               (NOT just a generic filter function; this allows an implementation to use a custom data structure or sort by x and return selected data quickly)

  requirement: selection dataset can be queried lazily (no overhead to create a selection)
  requirement: selection dataset can notify listeners when data is streamed into parent that meet the selection criteria
  requirement: BE COMPATIBLE WITH a later implementation that manages a set of named fields like we might use in Lab (mass, element, charge, vx, vy, etc) instead of just x, y pairs


  // Raw shared data support, to implement later.
  // Note dataset obviously doesn't get notification if third parties mutate these arrays.
  // Furthermore, note that dataset implementations might need to be able to notify
  // listeners when if it ever swaps one backing store reference for another.
  // Additionally, some implementations might use a clever data structure instead of arrays
  // and correspondingly should not implement these methods (or throw an error if called)
  setBackingArrays(array1, array2, ...)
  [array1, array2, ...] = getBackingArrays()

  // GC friendly versions that implement copy. Implement at least 'copyDataInto' now.
  copyDataInto(array1, array2, ...)
  setDataArrays(array1, array2, ...)

  // 'nice' versions
  [[x1, y1], [x2, y2], ...] = getDataPoints()
  setDataPoints([x1, y1], [x2, y2], ...)

  // These are more specific to timeseries type datasets:
  x = getNextX()         // defaults to 0
  setNextX(x)
  incr = getXIncrement() // defaults to 1
  setXIncrement(incr)

  // expect that the throwaway object creation here is ok because
  // add() would not be called in inner loops
  add(y1, y2, ...)
  add([x1,y1], [x2,y2], ...)

  // select a region
  select([x1, x2]) -> later? selection(function) and select([x1, y1], [x2, y2])
  select([]) -> empty selection
  select(null) -> no selection (practical difference is...?)

  [x1, y1] | [] | null = getSelectionDomain()

  // this is all we'll implement for now
  [[x1, y1], [x2, y2], ...] = getSelectedDataPoints()

  // eventually we can implement this, allowing
  // (1) notification from the selection dataset when data that matches selection criteria streams into parent
  // (2) (lazy!!) access to the gc-friendly shared-array methods (like copyDataInto) on the selection dataset
  dataset = getSelectionDataset()

  events:
    data -> single data point added
    dataReset -> the backing data store was changed (setData* called, selection parent)
    (select -> selection criteria changed. Don't implement now; unclear whether selection dataset
     should listen for this event and request data or be manipulated by parent (since parent
     creates and maintains a reference to the selection, probably the latter.)

gut check:
---

 * is the part to be implemented now sufficient to allow data streaming into the graph?

   applet.on('data', function(d) {
     // d is a y-value
     dataset.add(d)
   });

   dataset.on('data', function(d) {
     // d is an [x,y] pair
     graph.addPoint(d);
   });

   dataset.setXIncrement(0.1);


 * is the part to be implemented now sufficient to export data from the graph after the selection changes?

   graph.selectionListener(function(domain) {
     dataset.select(domain);
   });

   // later, in export

   sel = dataset.getSelectedDataPoints();
   exportToDataGames(sel)


 * will this be sufficient to allow a graph to be streamed with 'selection'?

   graph1.selectionListener(function(domain) {
     dataset.select(domain);
   });

   selection = dataset.getSelectionDataset()

   selection.on('data', function(d) {
     graph2.addPoint(d);
   });

   selection.on('dataReset', function(d) {
     graph2.data(selection.getDataPoints())
   });


 * will this work with shared-data scenarios using typed arrays?

   Yes, although we'll have to generalize from (x, y) to (mass, element, charge, x, y, vx,...)
   The key is that even at the beginning we can store x, y data unrolled an array of x and an array of y


 * will this work with custom backing data structures like heaps that optimize for things
   like allowing random insertion and fast ordered filtering?

   Probably, although this means that getBackingArrays should go away in such a class to be
   replaced by something else (copyDataInto and setDataFromArrays should continue to work.)


The dataset spec for now
---

  toHaveData matcher:
    array = dataset.getDataPoints
    each data point should be equal to expected
    dataset.copyDataInto(array1, array2, ...)
    each array index should equal expected...

  toHaveLength matcher:
    dataset.length() == expected


  dataset class
    should exist, etc.

  a dataset instance
    when created

      should have length 0
      should have data []

      selection domain
        should be null
      x increment
        should be one
      next x value
        should be zero

    setDataPoints method
      when called with [1,2], [3, 4]
        should fire dataReset event
        should set data to [[1,2], [3,4]]

    when initialized with data [[1,2], [3,4]]
      length should be 2

      and xIncrement is 2
        and next x is 5
          after add(6) is called
            should have data [[1,2],[3,4],[5,6]]
            should have length 3
            next x should be 7
            data event should be fired with [5, 6] as data
            dataReset should not be fired

            after add(8) is called
              // just make sure the reported next x value is actually honored
              should have data [[1,2],[3,4],[5,6],[7,8]]


    copyDataInto method
      when data is []
        should set x = []
        should set y = []

      when data is [[1,2], [2,3]]
        should set x = [1, 2]
        should set y = [2, 3]

    getDataPoints method
      when data is []
        should return []

      when data is [[1,2], [2,3]]
        should set x = [1, 2]
        should set y = [2, 3]

    copying behavior
      when setDataPoints is called with [[1,2], [3,4]]
        and original data is mutated
          should still have data [[1,2],[3,4]]


    selection support

      when data is [[1,2],[3,4],[5,6],[7,8]]

        after select(null)
          selection domain should be null
          selected data should be null

        after select([])
          selection domain should be []
          selected data should be []

        when selection domain boundaries are not on data point x values: select([2,6])
          selected data should be the points within the selected interval [3,4],[5,6]

        when the selection domain lower boundary equals a data point x value: select([1,6])
          selected data should include the intersecting point:  [1,2], [3,4],[5,6]

        when the selection domain upper boundary boundary equals a data point x value: select([2,7])
          selected data should include the intersecting point: [3,4], [5,6], [7,8]

        when selection domain is expressed as (xmax, xmin) with xmax > xmin: select([6,2])
          selected data should still include all points between xmin and xmax: [3,4], [5,6]


